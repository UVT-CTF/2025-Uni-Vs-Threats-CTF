
MEMORY
ADDRESS   VALUE
0x7a4     0x4a1c4
0x7c7     0x87c0b
0x881ba   0x2ffa8
________________________________

PUSH2 0x951d
[0x951d]

PUSH4 0x6063eb0c
[0x951d, 0x6063eb0c]

DIV # 0x6063eb0c // 0x951d = 0xa57c
[0xa57c]

PUSH2 0x3b83
[0xa57c, 0x3b83]

CALLVALUE
[0xa57c, 0x3b83, CALLVALUE]

PUSH1 0x63
PUSH2 0x3f72
PUSH1 0xb4
[0xa57c, 0x3b83, CALLVALUE, 0x63, 0x3f72, 0xb4]

ADDMOD # (0xb4 + 0x3f72) mod 0x63 = 0x57
[0xa57c, 0x3b83, CALLVALUE, 0x57]

MUL
[0xa57c, 0x3b83, CALLVALUE*0x57]

SUB
[0xa57c, CALLVALUE*0x57 - 0x3b83]

PUSH1 0x2c
[0xa57c, CALLVALUE*0x57 - 0x3b83, 0x2c]

PUSH2 0x1af3
[0xa57c, CALLVALUE*0x57 - 0x3b83, 0x2c, 0x1af3]

MUL
[0xa57c, CALLVALUE*0x57 - 0x3b83, 0x4a1c4]

PUSH2 0x7a4
[0xa57c, CALLVALUE*0x57 - 0x3b83, 0x4a1c4, 0x7a4]

MSTORE
[0xa57c, CALLVALUE*0x57 - 0x3b83]

PUSH3 0x7d0b9
[0xa57c, CALLVALUE*0x57 - 0x3b83, 0x7d0b9]

PUSH2 0xab52
[0xa57c, CALLVALUE*0x57 - 0x3b83, 0x7d0b9, 0xab52]

ADD
[0xa57c, CALLVALUE*0x57 - 0x3b83, 0x87c0b]

PUSH2 0x7c7
[0xa57c, CALLVALUE*0x57 - 0x3b83, 0x87c0b, 0x7c7]

MSTORE
[0xa57c, CALLVALUE*0x57 - 0x3b83]

PUSH3 0x26a85
[0xa57c, CALLVALUE*0x57 - 0x3b83, 0x26a85]

PUSH2 0x952d
[0xa57c, CALLVALUE*0x57 - 0x3b83, 0x26a85, 0x952d]

XOR
[0xa57c, CALLVALUE*0x57 - 0x3b83, 0x2ffa8]

PUSH3 0x881ba
[0xa57c, CALLVALUE*0x57 - 0x3b83, 0x2ffa8, 0x881ba]

MSTORE
[0xa57c, CALLVALUE*0x57 - 0x3b83]

MLOAD 0x7c7
[0xa57c, CALLVALUE*0x57 - 0x3b83, 0x87c0b]

MLOAD 0x7a4
[0xa57c, CALLVALUE*0x57 - 0x3b83, 0x87c0b, 0x4a1c4]

MUL
[0xa57c, CALLVALUE*0x57 - 0x3b83, 0x274cade36c]

EQ
[0xa57c, CALLVALUE*0x57 - 0x3b83 == 0x274cade36c]

PUSH 0x42
[0xa57c, CALLVALUE*0x57 - 0x3b83 == 0x274cade36c, 0x42]

JUMPI
SELFDESTRUCT
STOP
______________________________________________________________

1af3 * 2c = 4a1c4
87c0b * 4a1c4 = 274cade36c
CALLVALUE*0x57 - 0x3b83 == 0x274cade36c
CALLVALUE =  (0x274cade36c + 0x3b83) // 0x57
CALLVALUE = 0x73a3d729 = 1940117289
______________________________________________________________